# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Badge {
  createdAt: String!
  description: String!
  id: ID!
  imagePath: String!
  level: Float!
  name: String!
}

type Comment {
  author: User!
  content: String!
  dislikes: Int!
  id: ID!
  likes: Int!
  post: Post!
}

input EditPostInput {
  message: String
  title: String
  topics: [String!]
}

input MakeBadgeInput {
  description: String!
  imagePath: String!
  level: Float!
  name: String!
}

type Mutation {
  createPost(data: NewPostInput!): Boolean!
  editPost(data: EditPostInput!, postId: String!): Boolean!
  makeAdmin(roles: [Role!]!, user: String!): Boolean!
  makeBadge(data: MakeBadgeInput!): Boolean!
  updateProfile(data: UpdateProfileInput!): Boolean!
}

input NewPostInput {
  message: String!
  title: String!
  topics: [String!]!
}

type Post {
  author: User!
  comments: [Comment!]!
  createdAt: String!
  dislikes: Int!
  id: ID!
  lastEdited: String
  likes: Int!
  message: String!
  title: String!
  topics: [String!]!
}

type Query {
  allBadges: [Badge!]!
  allComments: [Comment!]!
  allPosts: [Post!]!
  allRepos: [Repo!]!
  allUsers: [User!]!
  currentUser: User
  getAvailableUsername(username: String!): String!
  getBadge(id: String!): Badge!
  getComment(id: String!): Comment!
  getPost(id: String!): Post!
  getRepo(id: String!): Repo!
  getUser(id: String!): User!
  getUserByName(username: String!): User
  paginateBadges(limit: Float!, offset: Float!): [Badge!]!
  paginateComments(limit: Float!, offset: Float!): [Comment!]!
  paginatePosts(limit: Float!, offset: Float!): [Post!]!
  paginateRepos(limit: Float!, offset: Float!): [Repo!]!
  paginateUsers(limit: Float!, offset: Float!): [User!]!
}

type Repo {
  active: Boolean!

  """
  Time when the repo was added (the number of milliseconds passed since Unix epoch 1970-01-01T00:00:00Z)
  """
  date_added: String!
  desc: String!
  full_name: String!
  github_owner: String!
  id: ID!
  issues: Float!
  language: String!
  name: String!
  owner: User!
  stars: Float!
  url: String!
}

enum Role {
  Admin
  Moderator
  SuperAdmin
}

input UpdateProfileInput {
  avatar: String
  banner: String
  bio: String
  name: String
  username: String
}

type User {
  avatar: String!
  badges: [Badge!]
  banner: String
  bio: String
  createdAt: String!
  github: String
  id: ID!
  name: String
  posts: [Post!]
  repos: [Repo!]
  roles: [Role!]!
  twitter: String
  url: String
  username: String
  verified: Boolean!
}
